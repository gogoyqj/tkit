<% if (local) { %>
import { Tction, ${modern ? 'MM' : 'M'} } from '@tkit/model';
import { api } from '@services';

const Model = ${modern ? 'MM' : 'M'}({
  state: {},
  namespace: '${camelName}',
  reducers: {
    /** doSomething */
    <% if (modern) { %>
    doSomething: (state, action: Tction<{}>) => {
    }
    <% } else { %>
    doSomething: (state, action: Tction<{}>): typeof state => {
      return {
        ...state
      };
    }
    <% } %>
  },
  effects: {
    /** doSomethingAsyc */
    doSomethingAsyc: async ({ tPut }) => {
      const res = await api.xxx();
      tPut(Model.actions.doSomething, {});
    }
  }
});

/**
 * @description 局部Model ${camelName} 供 useModel 使用
 */
export default Model;

<% } else {%>
<% if (modern) { %>
import { CM, Tction } from '@tkit/model';
import { TkitUtils as Utils } from '@tkit/types';
import { api } from '@services';

export interface State {
}

export const ${camelName}State: State = {
}

const model = CM({
  state: ${camelName}State,
  namespace: '${camelName}',
  reducers: {
    /** doSomething */
    doSomething: (state, action: Tction<{}>) => {
    }
  },
  effects: {
    /** doSomethingAsync */
    *doSomethingAsync({ namespace, put, tPut, tCall }, action: Tction<{}>): Iterator<{}<%= isModernTS ? ', any, any' : '' %>> {
      // yield put({ type: `$\{namespace}/doLogin`, payload: { username: '' } });
      // const data: Utils.GetROA<typeof api.getTest> = yield tCall(api.getTest, 2);
      // yield tPut(model.actions.doLogin, { username: '' });
    }
  }
});
<% } else { %>
import createModel, { Tction } from '@tkit/model';
import { TkitUtils as Utils } from '@tkit/types';
import { api } from '@services';

export interface State {
  // @IMP: 保留${camelName}层级结构
  ${camelName}: {}
}

export const ${camelName}State: State = {
  ${camelName}: {}
}

const model = createModel({
  state: ${camelName}State,
  namespace: '${camelName}',
  reducers: {
    /** doSomething */
    doSomething: (state, action: Tction<{}>): typeof state => {
      return {
        ...state
      };
    }
  },
  effects: {
    /** doSomethingAsync */
    *doSomethingAsync({ namespace, put, tPut, tCall }, action: Tction<{}>): Iterator<{}<%= isModernTS ? ', any, any' : '' %>> {
      // yield put({ type: `$\{namespace}/doLogin`, payload: { username: '' } });
      // const data: Utils.GetROA<typeof api.getTest> = yield tCall(api.getTest, 2);
      // yield tPut(model.actions.doLogin, { username: '' });
    }
  }
});
<% }%>

/**
 * @description 全局Model ${camelName} 挂载到 redux 上
 */
export default model;

<%}%>