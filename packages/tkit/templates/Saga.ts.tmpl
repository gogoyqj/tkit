import { delay } from 'redux-saga';
import { takeLatest } from 'redux-saga/effects';
import { createAction, handleActions } from '@tkit/actions';
import { tPut, tCall } from '@tkit/model';
import { TkitUtils as Utils } from '@tkit/types';

import { IInitialState } from '../redux/initialState';

export const <%= constsName %> = '<%= feature %>/<%= constsName %>';
export const <%= constsName %>_SUCCESS = <%= constsName %> + '_SUCCESS';
export const <%= constsName %>_FAILED = <%= constsName %> + '_FAILED';

export const <%= actionName %> = () => createAction(<%= constsName %>);
export const <%= actionName %>Success = () => createAction(<%= constsName %>_SUCCESS);
export const <%= actionName %>Failed = (res: Utils.BasicResult) => createAction(<%= constsName %>_FAILED);
export type <%= actionName %>ActionType = ReturnType<typeof <%= actionName %>>;
export type <%= actionName %>SuccessActionType = ReturnType<typeof <%= actionName %>Success>;
export type <%= actionName %>FailedActionType = ReturnType<typeof <%= actionName %>Failed>;

export function* fetchData(action: <%= actionName %>ActionType):Iterator<{}<%= isModernTS ? ', any, any' : '' %>> {
  let res:Utils.BasicResult;
  try {
    res = yield tCall(delay, 20);
  } catch (err) {
    res = {
      code: 10002,
      message: err.message
    };
  }
  yield res && !res.code ? tPut(<%= actionName %>Success, res.result) : tPut(<%= actionName %>Failed, res);
}

export function* <%= sagaName %>() {
  yield takeLatest(<%= constsName %>, fetchData);
}

export interface I<%= pascalName %>State {
  // use Readonly
  // <%= actionName %>: Readonly<any>
}

export const <%= pureStateName %>: I<%= pascalName %>State = {
};
export const <%= reducerName %> = handleActions(
  {
    [<%= constsName %>_SUCCESS]: (state: IInitialState, action: <%= actionName %>ActionType): IInitialState => {
      return { ...state };
    }
  },
  <%= pureStateName %>
);